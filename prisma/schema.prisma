//prisma - serverless 데이터베이스를 지원.
//postgresql, mysql, sqlite 등 여러 데이터베이스 사용 가능

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  email        String?      @unique
  password     String?
  phone        String?      @unique
  github_id    String?      @unique
  avatar       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  tokens       Token[]
  products     Product[]
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  chat_rooms   ChatRoom[]
  messages     Message[]
  live_streams LiveStream[]
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  price       Float
  description String
  photo       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  payload   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

model Like {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  messages  Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String
}

model LiveStream {
  id         Int      @id @default(autoincrement())
  title      String
  stream_key String
  stream_id  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}
